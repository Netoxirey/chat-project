// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  avatar    String?
  isOnline  Boolean  @default(false)
  lastSeen  DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sentMessages     Message[]     @relation("MessageSender")
  receivedMessages Message[]     @relation("MessageReceiver")
  chatRooms        ChatRoomUser[]
  createdChatRooms ChatRoom[]    @relation("ChatRoomCreator")

  @@map("users")
}

model ChatRoom {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        ChatRoomType @default(DIRECT)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String

  // Relations
  creator User           @relation("ChatRoomCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  users   ChatRoomUser[]
  messages Message[]

  @@map("chat_rooms")
}

model ChatRoomUser {
  id         String   @id @default(cuid())
  userId     String
  chatRoomId String
  joinedAt   DateTime @default(now())
  isActive   Boolean  @default(true)

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@unique([userId, chatRoomId])
  @@map("chat_room_users")
}

model Message {
  id         String      @id @default(cuid())
  content    String
  type       MessageType @default(TEXT)
  isRead     Boolean     @default(false)
  isEdited   Boolean     @default(false)
  editedAt   DateTime?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  senderId   String
  receiverId String?
  chatRoomId String?

  // Relations
  sender   User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User?    @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  chatRoom ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum ChatRoomType {
  DIRECT
  GROUP
  CHANNEL
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}
